proxy:
  # Replace with a 64-hex-character token: run `openssl rand -hex 32`
  secretToken: "dd54ce462b7b177fcb586764142b9541d7fb8a8eac2ee38d66d9d4f9612d674f"
  service:
    # Minikube-friendly; access with: `minikube service -n <ns> proxy-public`
    type: NodePort

hub:
  # Persist hub state across pod restarts
  db:
    type: sqlite-pvc
  # Allow hub pod to reach Keycloak
  extraEnv:
    OAUTHENTICATOR_INSECURE_SKIP_SERVER_CERT_VERIFICATION: "1"
  # Map custom hostname to minikube IP for Keycloak access
  extraPodSpec:
    hostAliases:
      - ip: "192.168.49.2"
        hostnames:
          - "keycloak.local"
  config:
    JupyterHub:
      # Keycloak OAuth authentication
      authenticator_class: generic-oauth
      # Inject custom CSS via announcement (hidden but CSS active)
      template_vars:
        announcement: |
          <style>
            /* Standard Chartered Fonts */
            @font-face {
              font-family: 'SC Prosper';
              src: url('https://www.sc.com/en/content/themes/standard-chartered-corporate-affairs/build/0712556f63ef012590f5e25151a2b0cb.woff2') format('woff2');
              font-weight: 700;
              font-style: normal;
              font-display: swap;
            }
            
            @font-face {
              font-family: 'SC Prosper';
              src: url('https://www.sc.com/en/content/themes/standard-chartered-corporate-affairs/build/c4493736885007d8bc798eac2adb3cc3.woff2') format('woff2');
              font-weight: 400;
              font-style: normal;
              font-display: swap;
            }
            
            /* Apply SC Prosper font globally */
            body,
            .navbar,
            .navbar-default,
            .navbar-brand,
            .navbar-nav,
            .btn,
            button,
            input,
            select,
            textarea,
            .form-control,
            h1, h2, h3, h4, h5, h6,
            p, span, div, label {
              font-family: 'SC Prosper', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif !important;
            }
            
            /* Change navbar and header to rgb(2, 11, 67) (Standard Chartered blue) */
            .navbar-default,
            #header,
            nav.navbar {
              background-color: rgb(2, 11, 67) !important;
              border-color: rgb(2, 11, 67) !important;
            }
            
            /* Navigation links - white text - ALL elements */
            .navbar-default .navbar-brand,
            .navbar-default .navbar-nav > li > a,
            .navbar-default .navbar-text,
            .navbar-default .navbar-nav > li,
            .navbar-default .navbar-nav a,
            .navbar-nav > li > a,
            #header a,
            #header .navbar-nav > li > a,
            #header .navbar-right > li > a,
            nav.navbar a,
            .navbar a,
            .navbar-right a,
            .navbar .btn,
            .navbar button,
            .navbar-nav .btn,
            #header .btn,
            #header button,
            #header span,
            .navbar span {
              color: #ffffff !important;
            }
            
            /* Logout button with green background from SC logo */
            .navbar .btn-default,
            #header .btn-default,
            #header a.btn-default,
            a.btn.btn-sm.btn-default,
            .navbar-right .btn,
            #logout {
              color: #ffffff !important;
              border: none !important;
              background-color: #38D200 !important;
              background-image: none !important;
              outline: none !important;
              padding: 8px 20px !important;
              border-radius: 4px !important;
              font-size: 14px !important;
              font-weight: 500 !important;
              line-height: 1.42857143 !important;
              vertical-align: middle !important;
              text-shadow: none !important;
              box-shadow: none !important;
            }
            
            .navbar .btn-default:hover,
            #header .btn-default:hover,
            #header a.btn-default:hover,
            a.btn.btn-sm.btn-default:hover,
            .navbar-right .btn:hover,
            #logout:hover {
              background-color: #2DB800 !important;
              background-image: none !important;
              color: #ffffff !important;
              border: none !important;
              box-shadow: none !important;
            }
            
            .navbar .btn-default:focus,
            #header .btn-default:focus,
            .navbar .btn-default:active,
            #header .btn-default:active,
            #header a.btn-default:focus,
            #header a.btn-default:active,
            a.btn.btn-sm.btn-default:focus,
            a.btn.btn-sm.btn-default:active {
              color: #ffffff !important;
              background-color: #38D200 !important;
              background-image: none !important;
              border: none !important;
              outline: none !important;
              box-shadow: 0 0 0 0.2rem rgba(56, 210, 0, 0.25) !important;
            }
            
            /* Hide dark mode toggle button completely */
            #dark-theme-toggle,
            li:has(#dark-theme-toggle),
            .navbar .theme-switch,
            .navbar [data-jupyterhub-theme-toggle],
            #header .theme-switch,
            #header [data-jupyterhub-theme-toggle],
            .navbar-nav > li > a[href*="theme"],
            .navbar-right li:has(a[title="Theme"]),
            #theme-toggle,
            a[title="Theme"],
            button[data-theme-toggle],
            li:has([data-jupyterhub-theme-toggle]) {
              display: none !important;
              visibility: hidden !important;
              opacity: 0 !important;
              width: 0 !important;
              height: 0 !important;
              margin: 0 !important;
              padding: 0 !important;
            }
            
            /* Fix alignment and spacing for navbar-right items */
            .navbar-nav.navbar-right {
              display: flex !important;
              flex-direction: row !important;
              align-items: center !important;
              margin-right: 20px !important;
              margin-bottom: 0 !important;
              margin-top: 0 !important;
              padding-left: 0 !important;
            }
            
            .navbar-nav.navbar-right > li {
              display: inline-flex !important;
              align-items: center !important;
              margin-left: 15px !important;
              margin-right: 0 !important;
              margin-top: 0 !important;
              margin-bottom: 0 !important;
              padding-top: 0 !important;
              padding-bottom: 0 !important;
              float: none !important;
              list-style: none !important;
            }
            
            /* Dark mode toggle - first item no left margin */
            .navbar-nav.navbar-right > li:first-child {
              margin-left: 0 !important;
            }
            
            /* Username and links - proper vertical centering */
            .navbar-nav.navbar-right > li > a,
            .navbar-nav.navbar-right > li > span {
              display: inline-flex !important;
              align-items: center !important;
              min-height: 38px !important;
              padding: 9px 10px !important;
              line-height: 20px !important;
            }
            
            /* Logout button - same height as navbar for perfect alignment */
            .navbar-nav.navbar-right .btn-default,
            .navbar-nav.navbar-right a.btn,
            .navbar-nav.navbar-right li > .btn {
              display: inline-flex !important;
              align-items: center !important;
              justify-content: center !important;
              margin: 0 !important;
              min-height: 38px !important;
              padding: 9px 20px !important;
            }
            
            /* Hover and focus states */
            .navbar-default .navbar-nav > li > a:hover,
            .navbar-default .navbar-nav > li > a:focus,
            .navbar-default .navbar-brand:hover,
            .navbar-default .navbar-brand:focus {
              color: #e0e0e0 !important;
              background-color: rgba(255, 255, 255, 0.1) !important;
            }
            
            /* Active nav item */
            .navbar-default .navbar-nav > .active > a,
            .navbar-default .navbar-nav > .active > a:hover,
            .navbar-default .navbar-nav > .active > a:focus {
              color: #ffffff !important;
              background-color: rgba(255, 255, 255, 0.15) !important;
            }
            
            /* Mobile toggle button */
            .navbar-default .navbar-toggle {
              border-color: #ffffff !important;
            }
            
            .navbar-default .navbar-toggle .icon-bar {
              background-color: #ffffff !important;
            }
            
            .navbar-default .navbar-toggle:hover,
            .navbar-default .navbar-toggle:focus {
              background-color: rgba(255, 255, 255, 0.1) !important;
            }
            
            /* Replace with Standard Chartered colored logo (readable on dark bg) */
            #jupyterhub-logo {
              content: url('data:image/svg+xml,<svg viewBox="0 0 157 62" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M28.9647 13.5687C29.8849 12.9703 30.8283 12.553 32.1542 12.5527C35.1952 12.5521 37.6604 15.0148 37.6604 18.052C37.6604 21.0891 35.1952 23.5511 32.1542 23.5511C30.8691 23.5511 29.894 23.1327 28.9647 22.5351L22.0721 18.052L28.9647 13.5687ZM4.21638 43.8988L30.0411 60.6903C32.5584 62.3193 36.0669 61.7306 37.7741 59.0631C39.4362 56.4661 38.7301 53.0234 36.1448 51.34L2.62803 29.5401C2.62803 29.5401 -0.805552 33.7103 0.23567 38.5748C0.977282 42.0396 4.21638 43.8988 4.21638 43.8988Z" fill="%2338D200"/><path fill-rule="evenodd" clip-rule="evenodd" d="M1.62342 18.0384C1.62342 23.556 5.57937 25.9416 5.57937 25.9416L36.1454 45.8223C36.1454 45.8223 39.5348 41.7708 38.5313 36.8528C37.8121 33.328 34.1628 31.2393 34.1628 31.2393L13.888 18.0521L25.7872 10.3133C28.3749 8.63344 29.109 5.17668 27.4269 2.59245C25.7449 0.00822502 22.2839 -0.725041 19.6961 0.954835L5.57779 10.184C5.57779 10.184 1.62342 12.5393 1.62342 18.0384ZM8.69567 60.5642C7.77544 61.1626 6.8321 61.5799 5.50624 61.5802C2.46521 61.5809 0 59.1182 0 56.081C0 53.0439 2.46521 50.5818 5.50624 50.5818C6.79141 50.5818 7.76651 51.0003 8.69567 51.5978L15.5883 56.0809L8.69567 60.5642Z" fill="%230473EA"/><path fill-rule="evenodd" clip-rule="evenodd" d="M154.98 29.7863L157.006 31.0221V45.8017H154.98V43.7137C153.992 45.1694 152.411 46.0576 150.509 46.0576C146.951 46.0576 144.407 43.4176 144.407 39.8154C144.407 36.1391 146.951 33.4497 150.509 33.4497C152.411 33.4497 153.992 34.3628 154.98 35.8431V29.7863ZM103.356 29.7807L105.357 31.0159V41.7592C105.357 43.4615 106.394 44.1277 107.704 44.1277C108.692 44.1277 109.68 43.8563 110.545 43.2395V45.1887C109.705 45.8055 108.544 46.0522 107.531 46.0522C104.937 46.0522 103.356 44.8925 103.356 41.6111V29.7807ZM116.633 33.4168C120.141 33.4168 122.439 36.0074 122.439 39.4863C122.439 39.8317 122.414 40.1771 122.365 40.4979H112.755C113.051 42.6938 114.78 44.1495 117.201 44.1495C118.758 44.1495 120.265 43.7054 121.549 42.7925V44.717C120.24 45.6053 118.758 46.0246 117.201 46.0246C113.372 46.0246 110.63 43.5573 110.63 39.8317C110.63 36.1801 112.952 33.4168 116.633 33.4168ZM137.236 33.4168C140.744 33.4168 143.042 36.0074 143.042 39.4863C143.042 39.8317 143.017 40.1771 142.968 40.4979H133.358C133.654 42.6938 135.384 44.1495 137.805 44.1495C139.361 44.1495 140.868 43.7054 142.153 42.7925V44.717C140.843 45.6053 139.361 46.0246 137.805 46.0246C133.975 46.0246 131.233 43.5573 131.233 39.8317C131.233 36.1801 133.555 33.4168 137.236 33.4168ZM85.8027 33.4167C87.705 33.4167 89.2612 34.305 90.2741 35.7607V33.6388H92.2998V45.8026H90.2741V43.73C89.2612 45.1611 87.705 46.0246 85.8027 46.0246C82.2451 46.0246 79.7007 43.3846 79.7007 39.7824C79.7007 36.1061 82.2451 33.4167 85.8027 33.4167ZM60.6783 33.4167C62.1359 33.4167 63.4946 33.8363 64.5817 34.6504V36.8956C63.6181 35.8594 62.2842 35.3166 60.8017 35.3166C58.2079 35.3166 56.3797 37.1177 56.3797 39.7084C56.3797 42.299 58.2327 44.1248 60.8267 44.1248C62.2842 44.1248 63.643 43.73 64.7052 42.8172V44.865C63.5193 45.6792 62.1112 46.0246 60.629 46.0246C56.8987 46.0246 54.3047 43.434 54.3047 39.7084C54.3047 36.0074 56.9726 33.4167 60.6783 33.4167ZM66.9284 29.783L68.9294 31.0183L68.9295 35.7113C69.8436 34.305 71.3011 33.4167 73.1538 33.4167C76.2172 33.4167 77.8478 35.662 77.8478 38.6474V45.8026H75.822V38.9928C75.822 36.6242 74.7845 35.366 72.6599 35.366C70.4117 35.366 68.9295 37.2904 68.9295 39.7084V45.8026H66.9284V29.783ZM101.86 33.4167V35.7113C99.4393 35.366 97.4135 36.9944 97.4135 40.0044V45.8026H95.4124V33.6388H97.4135V36.2295C98.3769 34.4283 99.9333 33.4167 101.86 33.4167ZM131.085 33.4167V35.7113C128.664 35.366 126.638 36.9944 126.638 40.0044V45.8026H124.637V33.6388H126.638V36.2295C127.602 34.4283 129.158 33.4167 131.085 33.4167ZM150.707 35.3496C148.236 35.3496 146.482 37.2247 146.482 39.7908C146.482 42.3073 148.236 44.1578 150.707 44.1578C153.202 44.1578 154.98 42.3073 154.98 39.7908C154.98 37.2247 153.202 35.3496 150.707 35.3496ZM86.0004 35.3166C83.5299 35.3166 81.7758 37.1917 81.7758 39.7577C81.7758 42.2743 83.5299 44.1248 86.0004 44.1248C88.4955 44.1248 90.2741 42.2743 90.2741 39.7577C90.2741 37.1917 88.4955 35.3166 86.0004 35.3166ZM116.658 35.2673C114.435 35.2673 113.101 36.8217 112.779 38.8695H120.314C120.117 36.7969 118.807 35.2673 116.658 35.2673ZM137.261 35.2673C135.038 35.2673 133.704 36.8217 133.383 38.8695H140.918C140.72 36.7969 139.41 35.2673 137.261 35.2673ZM106.911 33.4655C107.425 33.1394 108.083 33.1451 108.591 33.4801L110.607 34.8197L108.617 36.0944C108.11 36.4192 107.46 36.4201 106.952 36.0966L106.909 36.0695C105.956 35.4621 105.957 34.0712 106.911 33.4655ZM78.6879 15.6293C80.5902 15.6293 82.1466 16.5175 83.1592 17.9733V15.8513H85.185V28.0151H83.1592V25.9426C82.1466 27.3737 80.5902 28.2372 78.6879 28.2372C75.1304 28.2372 72.5859 25.5971 72.5859 21.9949C72.5859 18.3187 75.1304 15.6293 78.6879 15.6293ZM66.7805 11.9542V23.9441C66.7805 25.6465 67.8181 26.3127 69.1274 26.3127C70.1157 26.3127 71.1037 26.0413 71.9684 25.4245V27.3737C71.1286 27.9905 69.9673 28.2372 68.9544 28.2372C66.3605 28.2372 64.7794 27.0775 64.7794 23.796V13.1907L66.7805 11.9542ZM150.726 11.9551V28.0151H148.7V25.8932C147.712 27.3489 146.131 28.2372 144.229 28.2372C140.671 28.2372 138.127 25.5971 138.127 21.9949C138.127 18.3187 140.671 15.6293 144.229 15.6293C146.131 15.6293 147.712 16.5423 148.7 18.0226V13.1901L150.726 11.9551ZM121.945 15.6293C123.847 15.6293 125.404 16.5175 126.416 17.9733V15.8513H128.442V28.0151H126.416V25.9426C125.404 27.3737 123.847 28.2372 121.945 28.2372C118.388 28.2372 115.843 25.5971 115.843 21.9949C115.843 18.3187 118.388 15.6293 121.945 15.6293ZM58.6774 15.6293C60.1101 15.6293 61.4441 16.0241 62.3829 16.7396V18.8368C61.2714 17.8499 59.9124 17.2825 58.702 17.2825C57.4173 17.2825 56.5032 17.8746 56.5032 18.8615C56.5032 19.6017 56.8491 20.0458 57.8127 20.4158L60.7032 21.5755C62.2594 22.2417 62.9759 23.1792 62.9759 24.4869C62.9759 26.8062 61.0983 28.2372 58.455 28.2372C56.8491 28.2372 55.3915 27.7931 54.3293 27.0035V24.8324C55.6139 26.0413 57.0468 26.5841 58.4798 26.5841C59.9124 26.5841 60.9502 25.9673 60.9502 24.857C60.9502 24.1908 60.6043 23.6727 59.6903 23.3026L56.7998 22.143C55.3176 21.5016 54.5024 20.6627 54.5024 19.0836C54.5024 16.9617 56.207 15.6293 58.6774 15.6293ZM113.669 11.9551V28.0151H111.643V25.8932C110.655 27.3489 109.074 28.2372 107.172 28.2372C103.614 28.2372 101.07 25.5971 101.07 21.9949C101.07 18.3187 103.614 15.6293 107.172 15.6293C109.074 15.6293 110.655 16.5423 111.643 18.0226V13.1901L113.669 11.9551ZM138.003 15.6293V17.9239C135.582 17.5785 133.556 19.2069 133.556 22.217V28.0151H131.555V15.8513H133.556V18.442C134.519 16.6409 136.076 15.6293 138.003 15.6293ZM94.523 15.6293C97.5863 15.6293 99.217 17.8745 99.217 20.86V28.0151H97.1912V21.2054C97.1912 18.8368 96.1537 17.5785 94.029 17.5785C91.7809 17.5785 90.2987 19.503 90.2987 21.9209V28.0151H88.2976V15.8513H90.2987V17.9239C91.2128 16.5175 92.6703 15.6293 94.523 15.6293ZM78.8856 17.5291C76.4151 17.5291 74.661 19.4043 74.661 21.9703C74.661 24.4869 76.4151 26.3373 78.8856 26.3373C81.3807 26.3373 83.1592 24.4869 83.1592 21.9703C83.1592 19.4043 81.3807 17.5291 78.8856 17.5291ZM107.37 17.5291C104.899 17.5291 103.145 19.4043 103.145 21.9703C103.145 24.4869 104.899 26.3373 107.37 26.3373C109.865 26.3373 111.643 24.4869 111.643 21.9703C111.643 19.4043 109.865 17.5291 107.37 17.5291ZM144.427 17.5291C141.956 17.5291 140.202 19.4043 140.202 21.9703C140.202 24.4869 141.956 26.3373 144.427 26.3373C146.922 26.3373 148.7 24.4869 148.7 21.9703C148.7 19.4043 146.922 17.5291 144.427 17.5291ZM122.143 17.5291C119.672 17.5291 117.918 19.4043 117.918 21.9703C117.918 24.4869 119.672 26.3373 122.143 26.3373C124.638 26.3373 126.416 24.4869 126.416 21.9703C126.416 19.4043 124.638 17.5291 122.143 17.5291ZM69.5698 15.8293C70.0761 15.5033 70.7261 15.5009 71.2349 15.8232L71.2775 15.8502C72.2325 16.4553 72.2346 17.8462 71.2814 18.4541C70.7683 18.7815 70.1105 18.7773 69.6015 18.4435L67.5827 17.1087L69.5698 15.8293Z" fill="white"/></svg>') !important;
              max-height: 60px !important;
              height: auto !important;
              width: auto !important;
              max-width: 180px !important;
            }
            
            .navbar-brand {
              padding: 5px 15px !important;
            }
            
            /* Hide announcement banner since we're only using it for CSS */
            div.container.announcement {
              display: none !important;
            }
            
            /* Style Add and Submit buttons with SC logo blue */
            #pip-add,
            #env-add,
            .btn-jupyter,
            input[type="submit"],
            button[type="submit"],
            .form-control + input[type="submit"] {
              background-color: #0473EA !important;
              border-color: #0473EA !important;
              color: #ffffff !important;
            }
            
            #pip-add:hover,
            #env-add:hover,
            .btn-jupyter:hover,
            input[type="submit"]:hover,
            button[type="submit"]:hover {
              background-color: #0260C1 !important;
              border-color: #0260C1 !important;
              color: #ffffff !important;
            }
            
            #pip-add:focus,
            #env-add:focus,
            .btn-jupyter:focus,
            input[type="submit"]:focus,
            button[type="submit"]:focus {
              background-color: #0473EA !important;
              border-color: #0473EA !important;
              box-shadow: 0 0 0 0.2rem rgba(4, 115, 234, 0.25) !important;
              color: #ffffff !important;
            }
            
            /* Change login page header to navbar blue */
            .auth-form-header {
              background-color: rgb(2, 11, 67) !important;
              background-image: none !important;
              border-color: rgb(2, 11, 67) !important;
              color: #ffffff !important;
            }
            
            .auth-form-header h1 {
              color: #ffffff !important;
            }
            
            /* Change form input focus color to logo blue */
            .form-control:focus,
            input[type="text"]:focus,
            input[type="password"]:focus,
            input[type="email"]:focus,
            select:focus,
            textarea:focus {
              border-color: #0473EA !important;
              outline: 0 !important;
              box-shadow: 0 0 0 0.2rem rgba(4, 115, 234, 0.25) !important;
            }
            
            /* Change Start My Server button to logo blue */
            .btn-primary,
            a.btn-primary,
            button.btn-primary {
              background-color: #0473EA !important;
              border-color: #0473EA !important;
              color: #ffffff !important;
            }
            
            .btn-primary:hover,
            a.btn-primary:hover,
            button.btn-primary:hover {
              background-color: #0260C1 !important;
              border-color: #0260C1 !important;
              color: #ffffff !important;
            }
            
            .btn-primary:focus,
            .btn-primary:active,
            a.btn-primary:focus,
            a.btn-primary:active,
            button.btn-primary:focus,
            button.btn-primary:active {
              background-color: #0473EA !important;
              border-color: #0473EA !important;
              box-shadow: 0 0 0 0.2rem rgba(4, 115, 234, 0.25) !important;
              color: #ffffff !important;
            }
            
            /* AI Factory text on login page */
            #ai-factory-text {
              position: absolute !important;
              top: 50% !important;
              right: 20px !important;
              transform: translateY(-50%) !important;
              color: #ffffff !important;
              font-size: 16px !important;
              font-weight: 500 !important;
              z-index: 9999 !important;
              line-height: 1 !important;
            }
          </style>
          <script>
            // Add "AI Factory On Premise" text to login page only
            document.addEventListener('DOMContentLoaded', function() {{
              // Check if we're on the login page (has auth-form-header)
              if (document.querySelector('.auth-form-header')) {{
                var navbar = document.querySelector('.navbar') || document.querySelector('#header');
                if (navbar && !document.getElementById('ai-factory-text')) {{
                  var aiFactoryText = document.createElement('div');
                  aiFactoryText.id = 'ai-factory-text';
                  aiFactoryText.textContent = 'AI Factory On Premise';
                  navbar.appendChild(aiFactoryText);
                }}
              }}
            }});
          </script>
    GenericOAuthenticator:
      # Keycloak OAuth configuration (local development setup)
      client_id: "jupyterhub"
      # Client secret from keycloak-setup.sh
      client_secret: "04be374e09a5ec14f259d10b1bf428d0fa04932d432b4b9c5a3ae6d0d1615812"
      
      # OAuth endpoints split for browser (localhost) vs hub pod (keycloak.local)
      # Browser: localhost:30080 via port-forward
      # Hub pod: keycloak.local (hostAliases → 192.168.49.2:30080)
      authorize_url: "http://localhost:30080/realms/jupyterhub/protocol/openid-connect/auth"
      token_url: "http://keycloak.local:30080/realms/jupyterhub/protocol/openid-connect/token"
      userdata_url: "http://keycloak.local:30080/realms/jupyterhub/protocol/openid-connect/userinfo"
      logout_redirect_url: "http://localhost:30080/realms/jupyterhub/protocol/openid-connect/logout"
      
      # OAuth scopes
      scope:
        - openid
        - profile
        - email
      
      # Username claim from Keycloak token
      username_claim: "preferred_username"
      
      # Allow all authenticated Keycloak users
      allow_all: true
      
      # Optional: Restrict access by groups (requires group mapper in Keycloak)
      # claim_groups_key: "groups"
      # allowed_groups:
      #   - "jupyterhub-users"
      
      # Optional: Define admin users or groups
      # admin_users:
      #   - "admin"
      # admin_groups:
      #   - "jupyterhub-admins"
  extraConfig:
    10-profile-list: |
      # Data science profile with pre-installed packages
      # Note: jupyter/scipy-notebook already includes Python 3.11, pandas, numpy, scipy, matplotlib, etc.
      c.KubeSpawner.profile_list = [
          {
              'display_name': 'Data Science - Standard',
              'description': 'SciPy notebook with pandas, numpy, scipy, scikit-learn, matplotlib, seaborn (1 CPU, 2G RAM)',
              'slug': 'datascience',
              'default': True,
              'kubespawner_override': {
                  'image': 'jupyter/scipy-notebook:latest',
                  'cpu_limit': 1.0,
                  'cpu_guarantee': 0.5,
                  'mem_limit': '2G',
                  'mem_guarantee': '1G',
                  'lifecycle_hooks': {
                      'postStart': {
                          'exec': {
                              'command': [
                                  '/bin/sh', '-c',
                                  'python -m pip install --no-cache-dir --upgrade pip && '
                                  'python -m pip install --no-cache-dir '
                                  'statsmodels openpyxl xlrd mlflow==2.16.2 boto3'
                              ]
                          }
                      }
                  }
              }
          },
          {
              'display_name': 'Data Science - Extended',
              'description': 'Enhanced environment with additional ML libraries: XGBoost, LightGBM, CatBoost (2 CPU, 4G RAM)',
              'slug': 'datascience-extended',
              'kubespawner_override': {
                  'image': 'jupyter/scipy-notebook:latest',
                  'cpu_limit': 2.0,
                  'cpu_guarantee': 1.0,
                  'mem_limit': '4G',
                  'mem_guarantee': '2G',
                  'lifecycle_hooks': {
                      'postStart': {
                          'exec': {
                              'command': [
                                  '/bin/sh', '-c',
                                  'python -m pip install --no-cache-dir --upgrade pip && '
                                  'python -m pip install --no-cache-dir '
                                  'statsmodels openpyxl xlrd mlflow==2.16.2 boto3 '
                                  'xgboost lightgbm catboost shap optuna'
                              ]
                          }
                      }
                  }
              }
          },
          {
              'display_name': 'Minimal - Basic Environment',
              'description': 'Lightweight Jupyter notebook with minimal packages (0.5 CPU, 1G RAM)',
              'slug': 'minimal',
              'kubespawner_override': {
                  'image': 'jupyter/minimal-notebook:latest',
                  'cpu_limit': 0.5,
                  'cpu_guarantee': 0.25,
                  'mem_limit': '1G',
                  'mem_guarantee': '512M',
                  'lifecycle_hooks': {
                      'postStart': {
                          'exec': {
                              'command': [
                                  '/bin/sh', '-c',
                                  'python -m pip install --no-cache-dir mlflow==2.16.2 boto3'
                              ]
                          }
                      }
                  }
              }
          },
      ]

    20-user-env-form: |
      # Dynamic key/value UI for environment variables combined with profile selection
      from tornado import escape
      
      def _make_profile_form_html(profile_list):
          """Generate profile selection HTML with JupyterHub styling"""
          if not profile_list:
              return ""
          
          html = ['<div class="form-group">']
          html.append('<label for="profile-select" class="section-title"><strong>Environment Profile</strong></label>')
          html.append('<p class="text-muted">Choose the environment that best fits your needs.</p>')
          html.append('<div class="profile-grid">')
          
          for idx, profile in enumerate(profile_list):
              profile_slug = profile.get('slug', f'profile-{idx}')
              display_name = profile.get('display_name', f'Profile {idx}')
              description = profile.get('description', '')
              is_default = profile.get('default', False)
              
              checked = 'checked' if is_default else ''
              html.append(f'''
                <div class="radio profile-item">
                  <label>
                    <input type="radio" name="profile" value="{escape.url_escape(profile_slug)}" {checked}>
                    <strong>{escape.xhtml_escape(display_name)}</strong>
                    <br>
                    <span class="text-muted">{escape.xhtml_escape(description)}</span>
                  </label>
                </div>
              ''')
          
          html.append('</div>')
          html.append('</div>')
          return ''.join(html)
      
      # Combine profile selection with environment variables form
      original_options_form = c.KubeSpawner.options_form
      profile_list = c.KubeSpawner.profile_list if hasattr(c.KubeSpawner, 'profile_list') else []
      
      profile_html = _make_profile_form_html(profile_list)
      
      c.KubeSpawner.options_form = f"""
      {profile_html}
      
      <hr>
      
      <div class="form-group">
        <label class="section-title"><strong>Custom Python Libraries</strong> <span class="text-muted">(Optional)</span></label>
        <p class="help-block">Add custom Python packages to install via pip. Examples: requests, beautifulsoup4, tensorflow</p>
        <div id="pip-error-container"></div>
        <table class="table table-condensed" id="pip-table">
          <thead>
            <tr>
              <th>Package Name</th>
              <th>Version (optional)</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="pip-tbody">
          </tbody>
        </table>
        <div id="no-pip-message" class="empty-state-container" style="display:block;margin:10px 0;">
          <div class="empty-state-content">
            <span class="empty-state-text">No custom Python packages</span>
            <button type="button" class="btn btn-sm btn-primary" id="pip-add">
              <i class="fa fa-plus"></i> Add
            </button>
          </div>
        </div>
      </div>
      
      <hr>
      
      <div class="form-group">
        <label class="section-title"><strong>Custom Environment Variables</strong> <span class="text-muted">(Optional)</span></label>
        <p class="help-block">Add custom environment variables for your notebook server.</p>
        <div id="env-error-container"></div>
        <table class="table table-condensed" id="env-table">
          <thead>
            <tr>
              <th>Key</th>
              <th>Value</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="env-tbody">
          </tbody>
        </table>
        <div id="no-vars-message" class="empty-state-container" style="display:block;margin:10px 0;">
          <div class="empty-state-content">
            <span class="empty-state-text">No custom environment variables</span>
        <button type="button" class="btn btn-sm btn-primary" id="env-add">
              <i class="fa fa-plus"></i> Add
        </button>
          </div>
        </div>
      </div>
      
      <style>
        .section-title {{
          font-size: 24px;
          margin-bottom: 8px;
          font-weight: normal;
        }}
        
        .profile-grid {{
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 15px;
          margin-top: 10px;
        }}
        
        @media (max-width: 768px) {{
          .profile-grid {{
            grid-template-columns: 1fr;
          }}
        }}
        
        .radio.profile-item {{
          margin-bottom: 0;
          padding: 10px;
          border: 1px solid #e0e0e0;
          border-radius: 4px;
          transition: all 0.2s;
          height: 100%;
        }}
        .radio.profile-item:hover {{
          background-color: #f9f9f9;
          border-color: #2e7eed;
        }}
        .radio label {{
          display: block;
          cursor: pointer;
          margin-bottom: 0;
          font-weight: normal;
        }}
        .radio input[type="radio"] {{
          margin-right: 8px;
          margin-top: 2px;
        }}
        #env-table {{
          margin-top: 10px;
        }}
        #env-table td {{
          vertical-align: middle;
        }}
        #pip-table {{
          margin-top: 10px;
        }}
        #pip-table td {{
          vertical-align: middle;
        }}
        #env-table td:last-child {{
          width: 1%;
          white-space: nowrap;
        }}
        #pip-table td:last-child {{
          width: 1%;
          white-space: nowrap;
        }}
        #pip-table td:first-child {{
          width: 50%;
        }}
        #pip-table td:nth-child(2) {{
          width: 49%;
        }}
        #env-table td:first-child {{
          width: 50%;
        }}
        #env-table td:nth-child(2) {{
          width: 49%;
        }}
        .env-remove {{
          font-size: 18px;
          line-height: 1;
          padding: 4px 8px;
        }}
        .remove-btn {{
          height: 34px;
          line-height: 1.42857143;
          padding: 6px 12px;
          font-size: 14px;
          white-space: nowrap;
          display: inline-flex;
          align-items: center;
          gap: 5px;
        }}
        .remove-icon {{
          font-size: 18px;
          font-weight: bold;
        }}
        .empty-state-container {{
          padding: 15px;
          background-color: #f9f9f9;
          border: 1px solid #e0e0e0;
          border-radius: 4px;
        }}
        .empty-state-content {{
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 15px;
        }}
        .empty-state-text {{
          color: #999;
          font-size: 14px;
        }}
      </style>
      
      <script type="text/javascript">
      (function() {{
        var tbody = document.getElementById('env-tbody');
        var addBtn = document.getElementById('env-add');
        var form = document.querySelector('form');
        var noVarsMessage = document.getElementById('no-vars-message');
        var envTable = document.getElementById('env-table');
        
        // Pip packages elements
        var pipTbody = document.getElementById('pip-tbody');
        var pipAddBtn = document.getElementById('pip-add');
        var noPipMessage = document.getElementById('no-pip-message');
        var pipTable = document.getElementById('pip-table');
        
        // Create error message div for environment variables
        var errorDiv = document.createElement('div');
        errorDiv.id = 'env-error';
        errorDiv.className = 'alert alert-danger';
        errorDiv.style.display = 'none';
        errorDiv.style.marginTop = '10px';
        errorDiv.style.marginBottom = '10px';
        document.getElementById('env-error-container').appendChild(errorDiv);
        
        // Create error message div for pip packages
        var pipErrorDiv = document.createElement('div');
        pipErrorDiv.id = 'pip-error';
        pipErrorDiv.className = 'alert alert-danger';
        pipErrorDiv.style.display = 'none';
        pipErrorDiv.style.marginTop = '10px';
        pipErrorDiv.style.marginBottom = '10px';
        document.getElementById('pip-error-container').appendChild(pipErrorDiv);
        
        // Function to update table visibility and button position
        function updateTableVisibility() {{
          if (tbody.children.length === 0) {{
            envTable.style.display = 'none';
            noVarsMessage.style.display = 'block';
            // Move button back to empty message
            var emptyStateContent = noVarsMessage.querySelector('.empty-state-content');
            if (emptyStateContent && !emptyStateContent.querySelector('#env-add')) {{
              emptyStateContent.appendChild(addBtn);
            }}
          }} else {{
            envTable.style.display = 'table';
            noVarsMessage.style.display = 'none';
            // Move button to table header
            var headerCell = envTable.querySelector('thead tr th:last-child');
            if (headerCell && !headerCell.querySelector('#env-add')) {{
              headerCell.style.textAlign = 'right';
              headerCell.appendChild(addBtn);
            }}
          }}
        }}
        
        // Function to update pip table visibility and button position
        function updatePipTableVisibility() {{
          if (pipTbody.children.length === 0) {{
            pipTable.style.display = 'none';
            noPipMessage.style.display = 'block';
            // Move button back to empty message
            var emptyStateContent = noPipMessage.querySelector('.empty-state-content');
            if (emptyStateContent && !emptyStateContent.querySelector('#pip-add')) {{
              emptyStateContent.appendChild(pipAddBtn);
            }}
          }} else {{
            pipTable.style.display = 'table';
            noPipMessage.style.display = 'none';
            // Move button to table header
            var headerCell = pipTable.querySelector('thead tr th:last-child');
            if (headerCell && !headerCell.querySelector('#pip-add')) {{
              headerCell.style.textAlign = 'right';
              headerCell.appendChild(pipAddBtn);
            }}
          }}
        }}
        
        function makeRow(key, val) {{
          var tr = document.createElement('tr');
          tr.innerHTML = 
            '<td><input type="text" name="env_key" class="form-control" placeholder="VARIABLE_KEY" autocorrect="off" spellcheck="false" /></td>' +
            '<td><input type="text" name="env_value" class="form-control" placeholder="value" autocorrect="off" spellcheck="false" /></td>' +
            '<td><button type="button" class="btn btn-danger env-remove remove-btn" aria-label="Remove"><span class="remove-icon">×</span> Remove</button></td>';
          
          if (typeof key === 'string') {{ 
            tr.querySelector('input[name="env_key"]').value = key; 
          }}
          if (typeof val === 'string') {{ 
            tr.querySelector('input[name="env_value"]').value = val; 
          }}
          
          var keyInput = tr.querySelector('input[name="env_key"]');
          var valueInput = tr.querySelector('input[name="env_value"]');
          
          // Auto-uppercase for env key
          keyInput.addEventListener('input', function(e) {{
            var start = this.selectionStart;
            var end = this.selectionEnd;
            this.value = this.value.toUpperCase();
            this.setSelectionRange(start, end);
            validateEnvironmentVariables();
          }});
          
          valueInput.addEventListener('input', function() {{
            validateEnvironmentVariables();
          }});
          
          tr.querySelector('.env-remove').addEventListener('click', function() {{
            tbody.removeChild(tr);
            // Update table visibility
            updateTableVisibility();
            // Re-validate after removing row
            validateEnvironmentVariables();
          }});
          
          return tr;
        }}
        
        function makePipRow(pkg, ver) {{
          var tr = document.createElement('tr');
          tr.innerHTML = 
            '<td><input type="text" name="pip_package" class="form-control" placeholder="package-name" autocorrect="off" spellcheck="false" /></td>' +
            '<td><input type="text" name="pip_version" class="form-control" placeholder="(optional)" autocorrect="off" spellcheck="false" /></td>' +
            '<td><button type="button" class="btn btn-danger pip-remove remove-btn" aria-label="Remove"><span class="remove-icon">×</span> Remove</button></td>';
          
          if (typeof pkg === 'string') {{ 
            tr.querySelector('input[name="pip_package"]').value = pkg; 
          }}
          if (typeof ver === 'string') {{ 
            tr.querySelector('input[name="pip_version"]').value = ver; 
          }}
          
          var pkgInput = tr.querySelector('input[name="pip_package"]');
          var verInput = tr.querySelector('input[name="pip_version"]');
          
          // Auto-lowercase for package name
          pkgInput.addEventListener('input', function(e) {{
            var start = this.selectionStart;
            var end = this.selectionEnd;
            this.value = this.value.toLowerCase();
            this.setSelectionRange(start, end);
            validatePipPackages();
          }});
          
          verInput.addEventListener('input', function() {{
            validatePipPackages();
          }});
          
          tr.querySelector('.pip-remove').addEventListener('click', function() {{
            pipTbody.removeChild(tr);
            updatePipTableVisibility();
            validatePipPackages();
          }});
          
          return tr;
        }}
        
        addBtn.addEventListener('click', function() {{
          var newRow = makeRow('', '');
          tbody.appendChild(newRow);
          // Update table visibility
          updateTableVisibility();
          // Validate after adding new row
          validateEnvironmentVariables();
        }});
        
        pipAddBtn.addEventListener('click', function() {{
          var newRow = makePipRow('', '');
          pipTbody.appendChild(newRow);
          updatePipTableVisibility();
          validatePipPackages();
        }});
        
        function clearValidationErrors() {{
          // Hide error message
          errorDiv.style.display = 'none';
          
          // Remove error styling from all inputs
          var allInputs = tbody.querySelectorAll('input[name="env_key"], input[name="env_value"]');
          allInputs.forEach(function(input) {{
            input.classList.remove('input-error');
            input.style.borderColor = '';
            input.style.backgroundColor = '';
          }});
        }}
        
        function validateEnvironmentVariables() {{
          clearValidationErrors();
          
          var rows = tbody.querySelectorAll('tr');
          var keys = {{}};
          var duplicates = [];
          var incompleteRows = [];
          var hasError = false;
          
          rows.forEach(function(row, index) {{
            var keyInput = row.querySelector('input[name="env_key"]');
            var valueInput = row.querySelector('input[name="env_value"]');
            
            if (!keyInput || !valueInput) return;
            
            var key = keyInput.value.trim();
            var value = valueInput.value.trim();
            
            // Check for incomplete rows (one field filled, other empty)
            if ((key && !value) || (!key && value)) {{
              hasError = true;
              incompleteRows.push(index + 1);
              
              // Highlight incomplete inputs
              if (key && !value) {{
                valueInput.style.borderColor = '#f0ad4e';
                valueInput.style.backgroundColor = '#fcf8e3';
                valueInput.style.transition = 'all 0.3s ease';
              }}
              if (!key && value) {{
                keyInput.style.borderColor = '#f0ad4e';
                keyInput.style.backgroundColor = '#fcf8e3';
                keyInput.style.transition = 'all 0.3s ease';
              }}
            }}
            
            // Skip empty rows (both fields empty)
            if (!key && !value) {{
              return;
            }}
            
            // Check for duplicates (only if row is complete)
            if (key && value) {{
              if (keys[key]) {{
                duplicates.push(key);
                hasError = true;
                
                // Highlight duplicate inputs with animation
                keyInput.style.borderColor = '#d9534f';
                keyInput.style.backgroundColor = '#f2dede';
                keyInput.style.transition = 'all 0.3s ease';
                keys[key].style.borderColor = '#d9534f';
                keys[key].style.backgroundColor = '#f2dede';
                keys[key].style.transition = 'all 0.3s ease';
              }} else {{
                keys[key] = keyInput;
              }}
            }}
          }});
          
          if (hasError) {{
            var errorMessages = [];
            
            if (duplicates.length > 0) {{
              var uniqueDuplicates = Array.from(new Set(duplicates));
              errorMessages.push('<strong><i class="fa fa-exclamation-triangle"></i> Duplicate keys:</strong> ' + 
                                uniqueDuplicates.join(', '));
            }}
            
            if (incompleteRows.length > 0) {{
              errorMessages.push('<strong><i class="fa fa-exclamation-circle"></i> Incomplete rows:</strong> Row ' + 
                                incompleteRows.join(', ') + 
                                ' - Both key and value must be filled');
            }}
            
            errorDiv.innerHTML = errorMessages.join('<br>') + 
                                '<br><small>Please fix the errors before submitting.</small>';
            errorDiv.style.display = 'block';
            
            // Disable submit button
            var submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) {{
              submitBtn.disabled = true;
              submitBtn.classList.add('disabled');
              submitBtn.title = 'Fix validation errors before submitting';
            }}
            
            return false;
          }} else {{
            // Re-enable submit button
            var submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) {{
              submitBtn.disabled = false;
              submitBtn.classList.remove('disabled');
              submitBtn.title = '';
            }}
          }}
          
          return true;
        }}
        
        function validatePipPackages() {{
          // Hide error message
          pipErrorDiv.style.display = 'none';
          
          // Remove error styling from all inputs
          var allInputs = pipTbody.querySelectorAll('input[name="pip_package"], input[name="pip_version"]');
          allInputs.forEach(function(input) {{
            input.style.borderColor = '';
            input.style.backgroundColor = '';
          }});
          
          var rows = pipTbody.querySelectorAll('tr');
          var packages = {{}};
          var duplicates = [];
          var hasError = false;
          
          rows.forEach(function(row, index) {{
            var pkgInput = row.querySelector('input[name="pip_package"]');
            var verInput = row.querySelector('input[name="pip_version"]');
            
            if (!pkgInput || !verInput) return;
            
            var pkg = pkgInput.value.trim();
            var ver = verInput.value.trim();
            
            // Skip empty rows (both fields empty)
            if (!pkg && !ver) {{
              return;
            }}
            
            // Check for package name without value (warning, not error)
            if (pkg && !ver) {{
              // This is okay - version is optional
            }}
            
            // Check for duplicates
            if (pkg) {{
              if (packages[pkg]) {{
                duplicates.push(pkg);
                hasError = true;
                
                // Highlight duplicate inputs
                pkgInput.style.borderColor = '#d9534f';
                pkgInput.style.backgroundColor = '#f2dede';
                pkgInput.style.transition = 'all 0.3s ease';
                packages[pkg].style.borderColor = '#d9534f';
                packages[pkg].style.backgroundColor = '#f2dede';
                packages[pkg].style.transition = 'all 0.3s ease';
              }} else {{
                packages[pkg] = pkgInput;
              }}
            }}
          }});
          
          if (hasError) {{
            var errorMessages = [];
            
            if (duplicates.length > 0) {{
              var uniqueDuplicates = Array.from(new Set(duplicates));
              errorMessages.push('<strong><i class="fa fa-exclamation-triangle"></i> Duplicate packages:</strong> ' + 
                                uniqueDuplicates.join(', '));
            }}
            
            pipErrorDiv.innerHTML = errorMessages.join('<br>') + 
                                '<br><small>Please fix the errors before submitting.</small>';
            pipErrorDiv.style.display = 'block';
            
            // Disable submit button
            var submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) {{
              submitBtn.disabled = true;
              submitBtn.classList.add('disabled');
              submitBtn.title = 'Fix validation errors before submitting';
            }}
            
            return false;
          }} else {{
            // Re-enable submit button if no errors
            var submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) {{
              submitBtn.disabled = false;
              submitBtn.classList.remove('disabled');
              submitBtn.title = '';
            }}
          }}
          
          return true;
        }}
        
        // Validate on form submission
        if (form) {{
          form.addEventListener('submit', function(e) {{
            if (!validateEnvironmentVariables() || !validatePipPackages()) {{
              e.preventDefault();
              e.stopPropagation();
              return false;
            }}
          }});
        }}
        
        // Add real-time validation to existing rows on page load
        var existingInputs = tbody.querySelectorAll('input[name="env_key"], input[name="env_value"]');
        existingInputs.forEach(function(input) {{
          input.addEventListener('input', function() {{
            validateEnvironmentVariables();
          }});
        }});
        
        // Add remove button handlers to existing rows
        var existingRemoveButtons = tbody.querySelectorAll('.env-remove');
        existingRemoveButtons.forEach(function(button) {{
          button.addEventListener('click', function() {{
            var row = button.closest('tr');
            tbody.removeChild(row);
            // Update table visibility
            updateTableVisibility();
            // Re-validate after removing row
            validateEnvironmentVariables();
          }});
        }});
        
        // Initialize table visibility on page load
        updateTableVisibility();
        updatePipTableVisibility();
        
        // Add hover effect to radio options
        var radios = document.querySelectorAll('.profile-item input[type="radio"]');
        radios.forEach(function(radio) {{
          radio.addEventListener('change', function() {{
            document.querySelectorAll('.profile-item').forEach(function(div) {{
              div.style.backgroundColor = '';
              div.style.borderColor = '#e0e0e0';
            }});
            if (this.checked) {{
              this.closest('.profile-item').style.backgroundColor = '#f0f7ff';
              this.closest('.profile-item').style.borderColor = '#2e7eed';
            }}
          }});
          
          // Highlight default selection on load
          if (radio.checked) {{
            radio.closest('.profile-item').style.backgroundColor = '#f0f7ff';
            radio.closest('.profile-item').style.borderColor = '#2e7eed';
          }}
        }});
      }})();
      </script>
      """

      def _options_from_form(formdata=None):
          # formdata values are arrays keyed by input name
          formdata = formdata or {}
          
          # Extract profile selection
          profile = formdata.get('profile', [None])[0]
          if isinstance(profile, bytes):
              profile = profile.decode('utf-8')
          
          # Extract custom environment variables
          keys = formdata.get('env_key') or []
          values = formdata.get('env_value') or []
          env = {}
          for i, raw_key in enumerate(keys):
              key = (raw_key or '').strip()
              if not key:
                  continue
              value = ''
              if i < len(values):
                  value = (values[i] or '').strip()
              env[key] = value
          
          # Extract custom pip packages
          pip_packages = formdata.get('pip_package') or []
          pip_versions = formdata.get('pip_version') or []
          custom_packages = []
          for i, raw_pkg in enumerate(pip_packages):
              pkg = (raw_pkg or '').strip()
              if not pkg:
                  continue
              version = ''
              if i < len(pip_versions):
                  version = (pip_versions[i] or '').strip()
              
              # Format as package==version if version specified, otherwise just package
              if version:
                  custom_packages.append(f'{pkg}=={version}')
              else:
                  custom_packages.append(pkg)
          
          return {
              'profile': profile,
              'extra_env': env,
              'custom_pip_packages': custom_packages
          }

      c.KubeSpawner.options_from_form = _options_from_form

      async def _merge_user_options_pre_spawn(spawner):
          """Merge user options into spawner configuration"""
          user_options = spawner.user_options or {}
          
          # Merge custom environment variables
          user_env = user_options.get('extra_env') or {}
          if isinstance(user_env, dict) and user_env:
              if not hasattr(spawner, 'environment') or spawner.environment is None:
                  spawner.environment = {}
              spawner.environment.update(user_env)

          # Install custom pip packages if provided
          custom_packages = user_options.get('custom_pip_packages') or []
          if custom_packages:
              # Build the pip install command
              packages_str = ' '.join(custom_packages)
              custom_install_cmd = f'python -m pip install --no-cache-dir {packages_str}'
              
              # Use extra_container_config to set lifecycle hooks (container-level, not pod-level)
              if not hasattr(spawner, 'extra_container_config') or spawner.extra_container_config is None:
                  spawner.extra_container_config = {}
              
              # Check if there's an existing postStart command from the profile
              existing_cmd = ""
              if hasattr(spawner, 'lifecycle_hooks') and spawner.lifecycle_hooks:
                  post_start = spawner.lifecycle_hooks.get('postStart', {})
                  exec_cfg = post_start.get('exec', {})
                  cmd_list = exec_cfg.get('command', [])
                  if len(cmd_list) >= 3 and cmd_list[0] == '/bin/sh' and cmd_list[1] == '-c':
                      existing_cmd = cmd_list[2]
              
              # Combine commands
              if existing_cmd:
                  final_cmd = f'{existing_cmd} && {custom_install_cmd}'
              else:
                  final_cmd = custom_install_cmd
              
              # Set the lifecycle hook on the container
              spawner.extra_container_config['lifecycle'] = {
                  'postStart': {
                      'exec': {
                          'command': ['/bin/sh', '-c', final_cmd]
                      }
                  }
              }

      c.KubeSpawner.pre_spawn_hook = _merge_user_options_pre_spawn

singleuser:
  # Use cluster default StorageClass for per-user home PVCs (dynamic provisioning)
  storage:
    type: dynamic
  extraEnv:
    # In-cluster endpoints for shared services (available to all profiles)
    MLFLOW_TRACKING_URI: "http://mlflow.mlflow.svc.cluster.local:5000"
    RAY_DASHBOARD_URL: "http://raycluster-kuberay-head-svc.ray.svc.cluster.local:8265"
    RAY_HEAD_SERVICE: "raycluster-kuberay-head-svc.ray.svc.cluster.local"
    # MinIO credentials for MLflow artifact storage
    AWS_ACCESS_KEY_ID: "minio"
    AWS_SECRET_ACCESS_KEY: "minio123"
    MLFLOW_S3_ENDPOINT_URL: "http://minio.mlflow.svc.cluster.local:9000"
    MLFLOW_S3_IGNORE_TLS: "true"
  # Note: Package installation is now handled per-profile in the profile_list configuration
  # This ensures each profile gets only the packages it needs with appropriate resources

# Optional: reduce pre-pull impact on small clusters
# prePuller:
#   hook:
#     enabled: true

